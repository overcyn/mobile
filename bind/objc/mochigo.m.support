#include <stdio.h>
#include <stdint.h>
#include <string.h>
#import <Foundation/Foundation.h>
#include "mochigo.h"

@interface MochiGoBridge ()
@property (nonatomic, strong) MochiGoValue *rootObject;
@end

@implementation MochiGoBridge

+ (MochiGoBridge *)sharedBridge {
    static MochiGoBridge *sBridge = nil;
    static dispatch_once_t sOnce;
    dispatch_once (&sOnce, ^{
        sBridge = [[MochiGoBridge alloc] init];
    });
    return sBridge;
}

- (MochiGoValue *)root {
    return [[MochiGoValue alloc] initWithGoRef:mochiGoRoot()];
}

@end

@interface MochiGoValue ()
@property (nonatomic, assign) GoRef ref;
@end

@implementation MochiGoValue {
    GoRef _ref;
}

@synthesize ref = _ref;

- (id)initWithGoRef:(GoRef)ref {
    if ((self = [super init])) {
        _ref = ref;
    }
    return self;
}

- (id)initWithBool:(BOOL)v {
    return [self initWithGoRef:mochiGoBool(v)];
}

- (id)initWithLongLong:(long long)v {
    return [self initWithGoRef:mochiGoInt64(v)];
}

- (id)initWithUnsignedLongLong:(unsigned long long)v {
    return [self initWithGoRef:mochiGoUint64(v)];
}

- (id)initWithDouble:(double)v {
    return [self initWithGoRef:mochiGoFloat64(v)];
}

- (id)initWithString:(NSString *)v {
    CGoBuffer buf = MochiNSStringToCGoBuffer(v);
    return [self initWithGoRef:mochiGoString(buf)];
}

- (id)initWithData:(NSData *)v {
    CGoBuffer buf = MochiNSDataToCGoBuffer(v);
    return [self initWithGoRef:mochiGoBytes(buf)];
}

- (id)initWithArray:(NSArray<MochiGoValue *> *)v {
    GoRef ref = mochiGoArray();
    for (MochiGoValue *i in v) {
        GoRef prev = ref;
        ref = mochiGoArrayAppend(ref, i.ref);
        mochiGoUntrack(prev); // Must manually untrack
    }
    return [self initWithGoRef:ref];
}

- (BOOL)toBool {
    return mochiGoToBool(_ref);
}

- (long long)toLongLong {
    return mochiGoToInt64(_ref);
}

- (unsigned long long)toUnsignedLongLong {
    return mochiGoToUint64(_ref);
}

- (double)toDouble {
    return mochiGoToFloat64(_ref);
}

- (NSString *)toString {
    return MochiCGoBufferToNSString(mochiGoToString(_ref));
}

- (NSData *)toData {
    return MochiCGoBufferToNSData(mochiGoToBytes(_ref));
}

- (NSArray *)toArray {
    NSInteger len = mochiGoArrayLen(_ref);
    NSMutableArray *array = [[NSMutableArray alloc] initWithCapacity:len];
    for (NSInteger i = 0; i < len; i++) {
        MochiGoValue *value = [[MochiGoValue alloc] initWithGoRef:mochiGoArrayAt(_ref, i)];
        [array addObject:value];
    }
    return array;
}

- (NSArray<MochiGoValue *> *)call:(NSString *)method args:(NSArray<MochiGoValue *> *)args {
    MochiGoValue *argsArray = [[MochiGoValue alloc] initWithArray:args];
    GoRef rlt = mochiGoCall(_ref, MochiNSStringToCGoBuffer(method), argsArray.ref);
    return [[MochiGoValue alloc] initWithGoRef:rlt].toArray;
}

- (MochiGoValue *)field:(NSString *)name {
    GoRef rlt = mochiGoField(_ref, MochiNSStringToCGoBuffer(name));
    return [[MochiGoValue alloc] initWithGoRef:rlt];
}

- (MochiGoValue *)objectForKeyedSubscript:(NSString *)key {
    return [self field:key];
}

- (void)dealloc {
    mochiGoUntrack(_ref);
}

@end